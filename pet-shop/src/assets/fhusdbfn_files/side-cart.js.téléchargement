function fetchConfig(type = 'json') {
    return {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Accept': `application/${type}` }
    };
}


class SideCart extends HTMLElement {
    constructor() {
      super();
  
      // components to initialize cart functionality
      this.cartBubble = document.querySelector(".cart-link");
      this.closeBtn = this.querySelector("#closecart");
      this.cartOverlay = this.querySelector(".sidecart__overlay");
  
      // components to be updated every time there is a cart action
      this.sidecartItems = this.querySelector(".sidecart__items .sidecart__items-wrapper");
      this.sidecartUpsell = this.querySelector(".sidecart__upsell");
      this.cartFooter = this.querySelector(".sidecart__footer");
      this.emptyCart = this.querySelector(".sidecart__empty");
      this.shippingMsg = this.querySelector(".sidecart__shipping .shipping-msg");
      this.shippingMeter = this.querySelector(".shipping-meter .meter-indicator");

      // Constants
      this.CARTROUTES = "/cart";
      this.FREESHIPPING = 7500;
      this.LOADINGICON = this.loadingIcon();
  
      this.init();
    }
  
    init() {
      this.cartBubble.addEventListener("click", this.openCart.bind(this));
      this.cartBubble.addEventListener("click", (e) => {
        e.preventDefault();
        this.openCart.bind(this);
      });
      this.closeBtn.addEventListener("click", this.closeCart.bind(this));
      this.cartOverlay.addEventListener("click", this.closeCart.bind(this));
    }

    reinit(){
        this.cartBubble = document.querySelector(".cart-link");
        this.cartBubble.addEventListener("click", this.openCart.bind(this));
        this.cartBubble.addEventListener("click", (e) => {
          e.preventDefault();
          this.openCart.bind(this);
        });
        this.closeBtn.addEventListener("click", this.closeCart.bind(this));
        this.cartOverlay.addEventListener("click", this.closeCart.bind(this));
        this.getCart();
    }
  
    openCart(event) {
      this.classList.add("cart--open");
      document.querySelector("body").classList.add("overflow-hidden");
    }
    closeCart(event) {
      event.preventDefault();
      this.classList.remove("cart--open");
      document.querySelector("body").classList.remove("overflow-hidden");
    }
    addLoadingCss(event){
      console.log("add event listner");
      document.querySelector(".sidecart__footer .footer__form .processBtn").classList.add("processBtn--loading");
      // this.classList.add("processBtn--loading");
    }
    // functions returning constant values
    loadingIcon() {
      return `
      <?xml version="1.0" encoding="utf-8"?>
      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: rgb(255, 255, 255) none repeat scroll 0% 0%; display: block; shape-rendering: auto;" width="80px" height="80px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
      <circle cx="50" cy="50" fill="none" stroke="#93c6d5" stroke-width="5" r="35" stroke-dasharray="164.93361431346415 56.97787143782138">
        <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="0.7692307692307692s" values="0 50 50;360 50 50" keyTimes="0;1"></animateTransform>
      </circle>
      <!-- [ldio] generated by https://loading.io/ --></svg>
      `;
    }
    discountIcon() {
      return `
      <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-discount color-foreground-{{ settings.accent_icons }}" viewBox="0 0 12 12">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M7 0h3a2 2 0 012 2v3a1 1 0 01-.3.7l-6 6a1 1 0 01-1.4 0l-4-4a1 1 0 010-1.4l6-6A1 1 0 017 0zm2 2a1 1 0 102 0 1 1 0 00-2 0z" fill="currentColor">
      </svg>
      `;
    }
  
    async addToCart(itemId, quantity = 1, itemProps = {}) {
      const updates = {
        items: [
          {
            quantity,
            id: itemId,
            properties: itemProps
          }
        ]
      };
      const properties = {
        ...fetchConfig('javascript'),
        body: JSON.stringify(updates)
      };
  
      try {
        const response = await fetch("/cart/add.js", properties);
        const data = await response.json();
  
        // get the cart data
        this.getCart();
      } catch(err) {
        console.error(err);
      }
    }
  
    async addItemsToCart(items) {
      const updates = {
        items: items.map((item) => { return { quantity: item.quantity, id: item.id, properties: item.property } })
      };
      const properties = {
        ...fetchConfig('javascript'),
        body: JSON.stringify(updates)
      };
  
      try {
        const response = await fetch("/cart/add.js", properties);
        const data = await response.json();
  
        // get the cart data
        this.getCart();
      } catch(err) {
        console.error(err);
      }
    }
  
    async getCart() {
      try {
        const response = await fetch("/cart.js");
        const data = await response.json();
        await this.reRenderCart(data);
        this.openCart()
      } catch(err) {
        console.error(err);
      }
    }
  
    async updateCart(variantId, quantity) {
      const updates = {
        updates: {},
      };
      updates.updates[variantId] = quantity;
  
      const properties = {
        ...fetchConfig("javascript"),
        body: JSON.stringify(updates),
      };
  
      try {
        const response = await fetch("/cart/update.js", properties);
        const data = await response.json();
  
        if(data) {
          await this.reRenderCart(data);
          console.log("rendering complete");
        }
        return data;
      } catch(err) {
        console.error("Error while updating", err);
        return null;
      }
    }
  
    async reRenderCart(cartData) {
      const itemCount = cartData.item_count;
      const promiseList = cartData.items.map((item) => {
        return new Promise((resolve, reject) => {
          fetch(`/products/${item.handle}.js`)
            .then(response => response.json())
            .then(data => resolve(data));
        });
      });
      const cartDataProducts = await Promise.all(promiseList);
      const upsellData = await this.getUpsellData(cartData, cartDataProducts);
      const upsellProducts = await this.getUpsellDataCollection();
      if(itemCount <= 0) {
        this.cartFooter.innerHTML = "";
        this.sidecartItems.innerHTML = "";
        this.sidecartUpsell.innerHTML = "";
        this.emptyCart.innerHTML = this.renderEmptyCart();
      }
      else {
        this.emptyCart.innerHTML = "";
        this.renderItems(cartData);
        this.renderUpsellCollection(upsellProducts,cartDataProducts);
        this.cartFooter.innerHTML = this.renderFooter(cartData);
      }
  
      this.reRenderShipping(cartData);
  
      const cartCountBubble = this.cartBubble.querySelector(".cart-link__count");
      cartCountBubble.innerHTML = this.reRenderBubble(itemCount);
    }
  
    renderItems(cartData) {
      // this executes if the cart is empty (only initial page load)
      if(!this.sidecartItems) {
        this.querySelector(".sidecart__items").innerHTML = `<div class="sidecart__items-wrapper"></div>`;
      }
      // reinitialize sidecartItems
      this.sidecartItems = this.querySelector(".sidecart__items .sidecart__items-wrapper");
  
      const discountIcon = this.discountIcon();
  
      const newItemsHTML = cartData.items.map(itemData => {
        return `
          <side-cart-item data-variant-id="${itemData.id}">
            <div class="action-loading">
              ${this.LOADINGICON}
            </div>
            <div class="sidecart__img">
              <img src="${itemData.image}">
            </div>
            <div class="sidecart__info">
              <div class="sidecart__info-titlesection">
                <a class="item-title" href="${itemData.url}">${itemData.product_title}</a>
                ${itemData.variant_title && itemData.variant_title !== "Default Title" ?
                  `<p class="item-variant-title">${itemData.variant_title}</p>` : ""}
              </div>

              <div class="sidecart__price-controls">
                <div class="sidecart__info-pricing">
                  <p>Price</p>
                  <p class="item-price"><span class="money">$${(itemData.final_price/100).toFixed(2)}</span></p>
                </div>
                
                <div class="sidecart__buttons">
                  <div class="sidecart__qty">
                    <p>Qty.</p>
                    <div class="sidecart__qty-control">
                      <button class="btn item-qty-btn qty-controller" data-update-type="minus">âˆ’</button>
                      <input id="itemQty" type="number" value="${itemData.quantity}" disabled />
                      <button class="btn item-qty-btn qty-controller" data-update-type="plus">+</button>
                    </div>
                  </div>
                  <a class="item-remove qty-controller" data-update-type="remove">Remove</a>
                </div>
              </div>
            </div>
            

            ${itemData.line_level_discount_allocations && itemData.line_level_discount_allocations.length > 0 ?
              `<ul class="item-discounts">
                ${itemData.line_level_discount_allocations.map((discount) => {
                  return `
                    <li>
                      ${discountIcon}
                      <span class="discount-info">
                        ${ discount.discount_application.title }(-$${(discount.discount_application.total_allocated_amount/100).toFixed(2) })
                      </span>
                    </li>`
                }).join("")}
              </ul>`: ""}
          </side-cart-item>
        `
      });
  
      this.sidecartItems.innerHTML = newItemsHTML.join("");
    }
  
    async getUpsellData(cartData, cartDataProducts) {
      let upsell_1, upsell_2;
      for(let i = 0; i < cartData.items.length; i++) {
        const item = cartData.items[i];
        const itemProduct = cartDataProducts[i];
  
        // breaks the loop if both upsell_1 and upsell_2 are reserved
        if(upsell_1 && upsell_2) { break; }
        else {
          if(itemProduct.tags.includes("upsell product")) {
            for(let j = 0; j < itemProduct.tags.length; j++) {
              const tag = itemProduct.tags[j];
              if(tag.includes("upsell_")) {
                const upsell_handle = tag.split("upsell_")[1];
                if(!upsell_1) upsell_1 = await fetch(`/products/${upsell_handle}.js`).then(response => response.json());
                else if(!upsell_2 && upsell_handle !== upsell_1.handle) upsell_2 = await fetch(`/products/${upsell_handle}.js`).then(response => response.json());
              }
            }
          }
        }
      }
  
      return [upsell_1, upsell_2];
    }
  
    renderUpsell(upsellData) {
      const upsell_1 = upsellData[0], upsell_2 = upsellData[1];
      const upsellHTML = upsell_1 || upsell_2 ? `
        <div class="sidecart__upsell-wrapper">
          <div class="sidecart__upsell-header">
            <p>ADD MORE TO YOUR CART</p>
          </div>
          <div class="sidecart__upsell-body">
            ${upsell_1 ? `
              <div class="sidecart__upsell-product">
                <div class="product_info">
                  <div class="img_container">
                    <img src="${upsell_1.featured_image}">
                  </div>
                  <p class="prod_title">${upsell_1.title}</p>
                  <p class="prod_price">${parseFloat(upsell_1.price / 100).toFixed(2)}</p>
                </div>
                <upsell-button>
                  <a class="upsell-button button button--primary" data-variant-id="${upsell_1.variants[0].id}">Add to Cart</a>
                </upsell-button>
              </div>
            ` : ""}
            ${upsell_2 ? `
              <div class="sidecart__upsell-product">
                <div class="product_info">
                  <div class="img_container">
                    <img src="${upsell_2.featured_image}">
                  </div>
                  <p class="prod_title">${upsell_2.title}</p>
                  <p class="prod_price">${parseFloat(upsell_2.price / 100).toFixed(2)}</p>
                </div>
                <upsell-button>
                  <a class="upsell-button button button--primary" data-variant-id="${upsell_2.variants[0].id}">Add to Cart</a>
                </upsell-button>
              </div>
            ` : ""}
          </div>
        </div>
      ` : "";
  
      this.sidecartUpsell.innerHTML = upsellHTML;
    }

    async getUpsellDataCollection() {
      const products = await fetch(`/collections/Upsell/products.json`).then(response => response.json());
      return products;
    }

    renderUpsellCollection({products},cartDataProducts) {
      const ids = new Set(cartDataProducts.map(each=>each.id));
      const filterProducts = products.filter(p => !ids.has(p.id));
      const upsellHTML = products.length > 0 ? `
        <div class="sidecart__upsell-wrapper">
          <div class="sidecart__upsell-header">
            <p>ADD MORE TO YOUR CART</p>
          </div>
          <div class="sidecart__upsell-body">
			${filterProducts.map(item => {
  			return`
            <div class="sidecart__upsell-product">
                <div class="img_container">
                  <img src="${item.images[0].src}">
                </div>
                <div class="product_info">
                  <a href="/products/${item.handle}"><p class="prod_title">${item.title}</p></a>
                  <div class="product_info-pricing">
                    <p>Price</p>
                    <p class="prod_price">$${parseFloat(item.variants[0].price).toFixed(2)}</p>
                  </div>
                  <upsell-button>
                    <a class="upsell-button button button--primary" data-variant-id="${item.variants[0].id}">Add to Cart</a>
                  </upsell-button>
                </div>
              </div>
			`}).join("")}
          </div>
        </div>
      ` : "";
  
      this.sidecartUpsell.innerHTML = upsellHTML;
    }

    renderFooter(cartData) {
      const updatedFooterHTML = `
        <div class="sidecart__footer-wrapper">
          <div class="footer__subtotal">
            <p class="subtotal-label">Subtotal</p>
            <p class="subtotal-price"><span class="money">$${(cartData.total_price / 100).toFixed(2)}</span></p>
          </div>
          <div class="footer__disclaimer">
            <p>
              Taxes and <a href="/policies/shipping-policy">shipping</a> calculated at checkout
            </p>
          </div>
          <form class="footer__form" action="${this.CARTROUTES}" method="post" id="cartform">
            <footer-submit-button>
              <button type="submit" class="btn processBtn" id="update-cart" name="checkout" >
                <span class="processBtn--content">Checkout</span>
              </button>
            </footer-submit-button>
          </form>
        </div>
      `
      return updatedFooterHTML;
    }
  
    renderEmptyCart() {
      const updatedEmptyHTML = `
        <div class="sidecart__empty-wrapper">
          <p class="empty-msg">Your cart is currently empty.</p>
        </div>
      `;
      return updatedEmptyHTML;
    }
  
    reRenderShipping(cartData) {
      const cartMsgUpdated = `
        ${
          cartData.total_price < this.FREESHIPPING ?
            `Spend <span class="shipping-threshold">$${((this.FREESHIPPING - cartData.total_price) / 100).toFixed(2)}</span> to unlock free shipping!`
            :"You qualify for free shipping!"
        }
      `;
      this.shippingMsg.innerHTML = cartMsgUpdated;
      const percentage = (cartData.total_price / this.FREESHIPPING * 100).toFixed(0);
      this.shippingMeter.style.width = percentage > 100 ? "100%" : `${percentage}%`;
    }
  
    reRenderBubble(itemCount) {
      const updatedBubbleHTML = `
        <span aria-hidden="true">${itemCount <= 10 ? itemCount : "10+"}</span>
        <span class="visually-hidden">${itemCount == 1 ? `${itemCount} item` : `${itemCount} items`}</span>
      `;
      return updatedBubbleHTML;
    }
  }
  
  customElements.define("side-cart", SideCart);
  
  class SideCartItem extends HTMLElement {
    constructor() {
      super();
  
      this.loadingScreen = this.querySelector(".action-loading");
      this.variantId = this.dataset.variantId;
      this.sideCart = this.closest("side-cart");
      this.qtyInput = this.querySelector("#itemQty");
      this.qtyButtons = this.querySelectorAll(".sidecart__buttons .qty-controller");
      this.init();
    }
  
    init() {
      if(this.qtyButtons && this.qtyButtons.length > 0) {
        this.qtyButtons.forEach((qtybtn) => {
          qtybtn.addEventListener("click", this.qtyBtnClick.bind(this, qtybtn));
        });
      }
    }
  
    qtyBtnClick(qtybtn, event) {
      event.preventDefault();
  
      const variantId = this.variantId;
      const updateType = qtybtn.dataset.updateType;
      const variantQty = parseInt(this.qtyInput.value);
  
      if(!variantQty || isNaN(variantQty)) {
        return;
      } else {
        switch(updateType) {
          case 'remove':
            this.updateQuantity(variantId, 0);
            break;
          case 'minus':
            this.updateQuantity(variantId, variantQty - 1);
            break;
          case 'plus':
            this.updateQuantity(variantId, variantQty + 1);
            break;
          default:
            // don't do anything if button updatetype attribute doesn't belong to any of the cases above
            return;
        }
      }
    }
  
    async updateQuantity(variantId, variantQty, alreadyUpdated = false) {
      // toggle loading screen
      this.loadingScreen.classList.add("loading");
  
      if(!alreadyUpdated) {
        const sideCart = this.sideCart;
        const cartData = await sideCart.updateCart(variantId, variantQty);
      }
  
      // if(variantQty <= 0) {
      //   this.remove();
      // } else {
      //   console.log("variantqty should be working", variantQty);
      //   this.qtyInput.value = variantQty;
      //   console.log("this input value", this.qtyInput.value);
      // }
  
      this.loadingScreen.classList.remove("loading");
    }
  }
  
  customElements.define('side-cart-item', SideCartItem);
  
  
  
  class UpsellButton extends HTMLElement {
    constructor() {
      super();
  
      this.atcBtn = this.querySelector(".upsell-button");
      this.sideCart = this.closest("side-cart");
      this.init();
    }
  
    init() {
      this.atcBtn.addEventListener("click", this.onATCClick.bind(this));
    }
    onATCClick() {
      const varId = this.atcBtn.dataset.variantId;
      this.sideCart.addToCart(varId, 1);
    }
  }
  
  customElements.define("upsell-button", UpsellButton);
  
  class FooterSubmitButton extends HTMLElement{
    constructor() {
      super();
      this.footerSubmitBtn = this.querySelector(".processBtn");
      this.init();
    }

    init() {
      this.footerSubmitBtn.addEventListener("click", this.loadingCSS.bind(this));
    }
    loadingCSS(event) {
      this.footerSubmitBtn.classList.add("processBtn--loading")
    }
  }
  customElements.define("footer-submit-button", FooterSubmitButton);